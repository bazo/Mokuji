<?php/** * Photon CMS * * @copyright  Copyright (c) 2009 Martin Bazik * @package    Receptar *//** * Homepage presenter. * * @author     Martin Bazik * @package    Receptar */class Front_BasePresenter extends Presenter{	public $oldLayoutMode = false;	public $oldModuleMode = false;	protected $themesDir = 'themes', $pathToTheme, $renderFromString = false;		/** @persistent */ 	public $lang;  	  	public function startup()	{            parent::startup();	    //$application = Environment::getApplication();	    if (!isset($this->lang))	    {	      $this->lang = $this->getHttpRequest()->detectLanguage(array('en','sk'));	      $this->canonicalize();	    }				Macros::registerMacros();		$this->absoluteUrls = TRUE;		$user = Environment::getUser();		$this->template->user = $user;		$translator = new Translator($this->lang);		$this->template->setTranslator($translator);		$this->template->website = Environment::getVariable('website');		$this->template->domain = 'http://'.Environment::getVariable('website');		$site_config = ConfigAdapterIni::load(APP_DIR.'/config/site.ini');		foreach($site_config['site'] as $var => $value)		{			Environment::setVariable($var, $value);		}		Environment::setVariable('themesDir', 'themes');	}		public function actionLogout()	{		Environment::getUser()->signOut();		$this->flashMessage('You have been logged off.');		$this->redirect('Default:default');	}		protected function createComponentCss()  	{            $theme = Environment::getVariable('theme');            $css = new CssLoader;            $css->absolutizeUrls = true;            $css->media = 'screen, tv, projection';            $css->sourcePath = APP_DIR.$this->pathToTheme . "/css";;            $css->sourceUri = APP_DIR.$this->pathToTheme;            $css->tempUri = Environment::getVariable("baseUri") . "css/front/$theme";            $css->tempPath = WWW_DIR . "/css/front/$theme";            $css->filters[] = array($this, "encodeImages");            return $css;  	}	public function encodeImages($code)	{            $encoder = new DataURIFilter();            return $encoder->convert($code);	}	protected function createComponentJs()  	{            $js = new JavaScriptLoader;            $js->tempUri = Environment::getVariable("baseUri") . "js";            $js->tempPath = WWW_DIR . "/js";            $js->sourcePath = APP_DIR.$this->pathToTheme . "/js";;            $js->joinFiles = Environment::isProduction();            if (Environment::isProduction()) {                    $js->filters[] = array($this, "packJs");            }            return $js;  	}	protected function packJs($code)  	{            $packer = new JavaScriptPacker($code, "None");            return $packer->pack();  	}		public function model($model_name)	{            static $model_instances;            $model_class = 'Front_'.ucfirst($model_name).'Model';            $model_instances[$model_name] = new $model_class();            return $model_instances[$model_name];	}		public function formatLayoutTemplateFiles($presenter, $layout)	{            $themesDir = Environment::getVariable('themesDir');            $theme = Environment::getVariable('theme');            $appDir = Environment::getVariable('appDir');            $path = '/' . str_replace(':', 'Module/', $presenter);            $pathP = substr_replace($path, '/'.$themesDir.'/'.$theme.'/templates', strrpos($path, '/'), 0);            $list = array(                    "$appDir$pathP/@$layout.phtml",                    "$appDir$pathP.@$layout.phtml",            );            while (($path = substr($path, 0, strrpos($path, '/'))) !== FALSE) {                    $list[] = "$appDir$path".'/'.$themesDir.'/'.$theme.'/templates/'."@$layout.phtml";            }            return $list;	}	public function formatTemplateFiles($presenter, $view)	{		            $parts = explode(':', $presenter);            Environment::setVariable('moduleDir', $parts[0].'Module');            $themesDir = Environment::getVariable('themesDir');            $theme = Environment::getVariable('theme');            $appDir = Environment::getVariable('appDir');            $path = '/' . str_replace(':', 'Module/', $presenter);            $pathP = substr_replace($path, '/'.$themesDir.'/'.$theme.'/templates', strrpos($path, '/'), 0);            $this->pathToTheme = substr($pathP,0,  strrpos($pathP, '/'));            $this->pathToTheme = substr($this->pathToTheme,0,  strrpos($this->pathToTheme, '/'));            $path = substr_replace($path, '/'.$themesDir.'/'.$theme.'/templates', strrpos($path, '/'));            return array(                    "$appDir$pathP/$view.phtml",                    "$appDir$pathP.$view.phtml",                    "$appDir$path/@global.$view.phtml",            );	}			//MACRO COMPONENTS	public function createComponentMenu()	{            $menu = new Menu();            $menu->setTranslator(new Translator($this->lang));            return $menu;	}		public function createComponentSearchBox()	{            $box = new SearchForm();            return $box;	}		/**	 * @return ITemplate	 */	/*	protected function createTemplate()	{		if($this->renderFromString == false) $template = new Template;		else $template = new StringTemplate();				$presenter = $this->getPresenter(FALSE);		$template->onPrepareFilters[] = array($this, 'templatePrepareFilters');		// default parameters		$template->component = $this; // DEPRECATED!		$template->control = $this;		$template->presenter = $presenter;		$template->baseUri = Environment::getVariable('baseUri');		$template->basePath = rtrim($template->baseUri, '/');		// flash message		if ($presenter !== NULL && $presenter->hasFlashSession()) {			$id = $this->getParamId('flash');			$template->flashes = $presenter->getFlashSession()->$id;		}		if (!isset($template->flashes) || !is_array($template->flashes)) {			$template->flashes = array();		}		// default helpers		$template->registerHelper('escape', 'Nette\Templates\TemplateHelpers::escapeHtml');		$template->registerHelper('escapeUrl', 'rawurlencode');		$template->registerHelper('stripTags', 'strip_tags');		$template->registerHelper('nl2br', 'nl2br');		$template->registerHelper('substr', 'iconv_substr');		$template->registerHelper('repeat', 'str_repeat');		$template->registerHelper('implode', 'implode');		$template->registerHelper('number', 'number_format');		$template->registerHelperLoader('Nette\Templates\TemplateHelpers::loader');		return $template;	}	*/}